// Code generated by MockGen. DO NOT EDIT.
// Source: go.k6.io/k6/cloudapi (interfaces: LogtailStreamer)

// Package cloudapi is a generated GoMock package.
package cloudapi

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockLogtailStreamer is a mock of LogtailStreamer interface.
type MockLogtailStreamer struct {
	ctrl     *gomock.Controller
	recorder *MockLogtailStreamerMockRecorder
}

// MockLogtailStreamerMockRecorder is the mock recorder for MockLogtailStreamer.
type MockLogtailStreamerMockRecorder struct {
	mock *MockLogtailStreamer
}

// NewMockLogtailStreamer creates a new mock instance.
func NewMockLogtailStreamer(ctrl *gomock.Controller) *MockLogtailStreamer {
	mock := &MockLogtailStreamer{ctrl: ctrl}
	mock.recorder = &MockLogtailStreamerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogtailStreamer) EXPECT() *MockLogtailStreamerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockLogtailStreamer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockLogtailStreamerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLogtailStreamer)(nil).Close))
}

// ReadMessage mocks base method.
func (m *MockLogtailStreamer) ReadMessage() (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockLogtailStreamerMockRecorder) ReadMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockLogtailStreamer)(nil).ReadMessage))
}

// WriteControl mocks base method.
func (m *MockLogtailStreamer) WriteControl(arg0 int, arg1 []byte, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteControl", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteControl indicates an expected call of WriteControl.
func (mr *MockLogtailStreamerMockRecorder) WriteControl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteControl", reflect.TypeOf((*MockLogtailStreamer)(nil).WriteControl), arg0, arg1, arg2)
}
