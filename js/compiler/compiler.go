/*
 *
 * k6 - a next-generation load testing tool
 * Copyright (C) 2017 Load Impact
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package compiler

import (
	_ "embed" // we need this for embedding Babel
	"encoding/json"
	"sync"
	"time"

	"github.com/dop251/goja"
	"github.com/dop251/goja/parser"
	"github.com/sirupsen/logrus"

	"go.k6.io/k6/lib"
)

//go:embed lib/babel.min.js
var babelSrc string //nolint:gochecknoglobals

var (
	DefaultOpts = map[string]interface{}{
		// "presets": []string{"latest"},
		"plugins": []interface{}{
			// es2015 https://github.com/babel/babel/blob/v6.26.0/packages/babel-preset-es2015/src/index.js
			[]interface{}{"transform-es2015-template-literals", map[string]interface{}{"loose": false, "spec": false}},
			"transform-es2015-literals",
			"transform-es2015-function-name",
			[]interface{}{"transform-es2015-arrow-functions", map[string]interface{}{"spec": false}},
			// "transform-es2015-block-scoped-functions", // in goja
			[]interface{}{"transform-es2015-classes", map[string]interface{}{"loose": false}},
			"transform-es2015-object-super",
			// "transform-es2015-shorthand-properties", // in goja
			"transform-es2015-duplicate-keys",
			[]interface{}{"transform-es2015-computed-properties", map[string]interface{}{"loose": false}},
			// "transform-es2015-for-of", // in goja
			// "transform-es2015-sticky-regex", // in goja
			// "transform-es2015-unicode-regex", // in goja
			// "check-es2015-constants", // in goja
			[]interface{}{"transform-es2015-spread", map[string]interface{}{"loose": false}},
			"transform-es2015-parameters",
			[]interface{}{"transform-es2015-destructuring", map[string]interface{}{"loose": false}},
			// "transform-es2015-block-scoping", // in goja
			// "transform-es2015-typeof-symbol", // in goja
			// all the other module plugins are just dropped
			[]interface{}{"transform-es2015-modules-commonjs", map[string]interface{}{"loose": false}},
			// "transform-regenerator", // Doesn't really work unless regeneratorRuntime is also added

			// es2016 https://github.com/babel/babel/blob/v6.26.0/packages/babel-preset-es2016/src/index.js
			"transform-exponentiation-operator",

			// es2017 https://github.com/babel/babel/blob/v6.26.0/packages/babel-preset-es2017/src/index.js
			// "syntax-trailing-function-commas", // in goja
			// "transform-async-to-generator", // Doesn't really work unless regeneratorRuntime is also added
		},
		"ast":           false,
		"sourceMaps":    false,
		"babelrc":       false,
		"compact":       false,
		"retainLines":   true,
		"highlightCode": false,
	}

	once        sync.Once // nolint:gochecknoglobals
	globalBabel *babel    // nolint:gochecknoglobals
)

// A Compiler compiles JavaScript source code (ES5.1 or ES6) into a goja.Program
type Compiler struct {
	logger logrus.FieldLogger
	COpts  CompilerOptions // TODO change this, this is just way faster
}

// New returns a new Compiler
func New(logger logrus.FieldLogger) *Compiler {
	return &Compiler{logger: logger}
}

// Transform the given code into ES5
func (c *Compiler) Transform(src, filename string, inputSrcMap []byte) (code string, srcmap *SourceMap, err error) {
	var b *babel
	if b, err = newBabel(); err != nil {
		return
	}

	return b.transformImpl(c.logger, src, filename, c.COpts.SourceMapEnabled, inputSrcMap)
}

// CompilerOptions are options to the compiler ;)
type CompilerOptions struct { // TODO maybe have the fields an exported and use the functional options pattern
	CompatibilityMode lib.CompatibilityMode
	SourceMapEnabled  bool
	SourceMapLoader   func(string) ([]byte, error)
	Strict            bool
}

// Compile the program in the given CompatibilityMode, wrapping it between pre and post code
func (c *Compiler) Compile(src, filename string, main bool, cOpts CompilerOptions) (*goja.Program, string, error) {
	code := src
	if !main { // TODO this also will require sourcemap
		code = "(function(module, exports){\n" + code + "\n})\n"
	}
	opts := parser.WithDisableSourceMaps
	var srcmap []byte
	var couldntLoadSourceMap bool
	if cOpts.SourceMapEnabled { // This currently only support loading maps generated by babel
		// fmt.Println("source maps enabled")
		opts = parser.WithSourceMapLoader(func(path string) ([]byte, error) {
			data, err := c.COpts.SourceMapLoader(path)
			if err == nil {
				srcmap = data
			} else {
				couldntLoadSourceMap = true
			}
			return data, err
		}) // TODO this should always be set if enabled
	}
	ast, err := parser.ParseFile(nil, filename, code, 0, opts)
	// we probably don't want to abort scripts which have source maps but they can't be found,
	// this also will be a breaking change
	if couldntLoadSourceMap {
		// TODO: original error is currently not very relevant
		c.logger.Warnf("Couldn't load source map for %s", filename)
		ast, err = parser.ParseFile(nil, filename, code, 0, parser.WithDisableSourceMaps)
	}
	if err != nil {
		if cOpts.CompatibilityMode == lib.CompatibilityModeExtended {
			code, _, err = c.Transform(src, filename, srcmap)
			if err != nil {
				return nil, code, err
			}
			// the compatibility mode "decreases" here as we shouldn't transform twice
			cOpts.CompatibilityMode = lib.CompatibilityModeBase
			return c.Compile(code, filename, main, cOpts)
		}
		return nil, code, err
	}
	pgm, err := goja.CompileAST(ast, cOpts.Strict)
	// Parsing only checks the syntax, not whether what the syntax expresses
	// is actually supported (sometimes).
	//
	// For example, destructuring looks a lot like an object with shorthand
	// properties, but this is only noticeable once the code is compiled, not
	// while parsing. Even now code such as `let [x] = [2]` doesn't return an
	// error on the parsing stage but instead in the compilation in base mode.
	//
	// So, because of this, if there is an error during compilation, it still might
	// be worth it to transform the code and try again.
	if err != nil {
		if cOpts.CompatibilityMode == lib.CompatibilityModeExtended {
			code, _, err = c.Transform(src, filename, srcmap)
			if err != nil {
				return nil, code, err
			}
			// the compatibility mode "decreases" here as we shouldn't transform twice
			cOpts.CompatibilityMode = lib.CompatibilityModeBase
			return c.Compile(code, filename, main, cOpts)
		}
		return nil, code, err
	}
	return pgm, code, err
}

type babel struct {
	vm        *goja.Runtime
	this      goja.Value
	transform goja.Callable
	mutex     sync.Mutex // TODO: cache goja.CompileAST() in an init() function?
}

func newBabel() (*babel, error) {
	var err error

	once.Do(func() {
		vm := goja.New()
		if _, err = vm.RunString(babelSrc); err != nil {
			return
		}

		this := vm.Get("Babel")
		bObj := this.ToObject(vm)
		globalBabel = &babel{vm: vm, this: this}
		if err = vm.ExportTo(bObj.Get("transform"), &globalBabel.transform); err != nil {
			return
		}
	})

	return globalBabel, err
}

// transformImpl the given code into ES5, while synchronizing to ensure only a single
// bundle instance / Goja VM is in use at a time.
func (b *babel) transformImpl(
	logger logrus.FieldLogger, src, filename string, sourceMapsEnabled bool, inputSrcMap []byte,
) (string, *SourceMap, error) {
	b.mutex.Lock()
	defer b.mutex.Unlock()
	opts := make(map[string]interface{})
	for k, v := range DefaultOpts {
		opts[k] = v
	}
	if sourceMapsEnabled {
		opts["sourceMaps"] = "inline" // true or both doesn't add the mapping so we need to use inline
		if inputSrcMap != nil {
			srcMap := new(map[string]interface{})
			if err := json.Unmarshal(inputSrcMap, &srcMap); err != nil {
				return "", nil, err
			}
			// fmt.Println(srcMap)
			opts["inputSourceMap"] = srcMap
		}
	}
	opts["filename"] = filename

	startTime := time.Now()
	v, err := b.transform(b.this, b.vm.ToValue(src), b.vm.ToValue(opts))
	if err != nil {
		return "", nil, err
	}
	logger.WithField("t", time.Since(startTime)).Debug("Babel: Transformed")

	vO := v.ToObject(b.vm)
	var code string
	if err = b.vm.ExportTo(vO.Get("code"), &code); err != nil {
		return code, nil, err
	}
	if !sourceMapsEnabled {
		return code, nil, nil
	}

	return code, nil, err
	/*
		var rawMap map[string]interface{}
		if err = b.vm.ExportTo(vO.Get("map"), &rawMap); err != nil {
			return code, nil, err
		}
		fmt.Println("Result:", rawMap)
		var srcMap SourceMap
		if err = mapstructure.Decode(rawMap, &srcMap); err != nil {
			return code, nil, err
		}
		return code, nil, err
	*/
}
